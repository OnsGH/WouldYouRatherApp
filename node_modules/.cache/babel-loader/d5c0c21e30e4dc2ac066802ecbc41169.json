{"ast":null,"code":"var _jsxFileName = \"/Users/ons/Documents/React/Redux/would_you_rather_app/src/components/Home.js\";\nimport React, { Component } from 'react';\nimport { Tab, Image, Card } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Home extends Component {\n  render() {\n    const {\n      data\n    } = this.props;\n    console.log('DATA', data);\n    return /*#__PURE__*/_jsxDEV(Tab, {\n      panes: panes({\n        data\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nconst panes = props => {\n  const {\n    data\n  } = props;\n  return [{\n    menuItem: 'Unanswered',\n    render: () => /*#__PURE__*/_jsxDEV(Tab.Pane, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  }, {\n    menuItem: 'Answered',\n    render: () => /*#__PURE__*/_jsxDEV(Tab.Pane, {\n      children: \"Answered\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 39\n    }, this)\n  }];\n};\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}) {\n  const answeredIds = Object.keys(users[authedUser].answers);\n  const unansweredQuestions = Object.values(questions).filter(question => !answeredIds.includes(question.id)).sort((a, b) => b.timestamp - a.timestamp);\n  const answeredQuestions = Object.values(questions).filter(question => {\n    return Object.keys(users[authedUser].answers).find(userQuestion => userQuestion === question.id);\n  }).sort((a, b) => b.timestamp - a.timestamp);\n  console.log('answeredQuestions', answeredQuestions);\n  return {\n    data: {\n      answeredQuestions,\n      unansweredQuestions // answeredQuestions\n\n    }\n  };\n}\n\nexport default connect(mapStateToProps)(Home);","map":{"version":3,"sources":["/Users/ons/Documents/React/Redux/would_you_rather_app/src/components/Home.js"],"names":["React","Component","Tab","Image","Card","connect","Home","render","data","props","console","log","panes","menuItem","mapStateToProps","authedUser","users","questions","answeredIds","Object","keys","answers","unansweredQuestions","values","filter","question","includes","id","sort","a","b","timestamp","answeredQuestions","find","userQuestion"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,GAAR,EAAaC,KAAb,EAAoBC,IAApB,QAA+B,mBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAGC,OAAQ,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAElCM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKC,KAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,MAAb,EAAqBH,IAArB;AACA,wBAAO,QAAC,GAAD;AAAK,MAAA,KAAK,EAAEI,KAAK,CAAC;AAAEJ,QAAAA;AAAF,OAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAN+B;;AAatC,MAAMI,KAAK,GAAIH,KAAD,IAAU;AAExB,QAAM;AAACD,IAAAA;AAAD,MAASC,KAAf;AAEA,SAAO,CACP;AACAI,IAAAA,QAAQ,EAAG,YADX;AACyBN,IAAAA,MAAM,EAAE,mBAC7B,QAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAFJ,GADO,EASP;AACAM,IAAAA,QAAQ,EAAG,UADX;AACuBN,IAAAA,MAAM,EAAE,mBAAO,QAAC,GAAD,CAAK,IAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADtC,GATO,CAAP;AAcC,CAlBD;;AAmBA,SAASO,eAAT,CAAyB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAzB,EAA2D;AACvD,QAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACD,UAAD,CAAL,CAAkBM,OAA9B,CAApB;AAEA,QAAMC,mBAAmB,GAAGH,MAAM,CAACI,MAAP,CAAcN,SAAd,EACzBO,MADyB,CAClBC,QAAQ,IAAI,CAACP,WAAW,CAACQ,QAAZ,CAAqBD,QAAQ,CAACE,EAA9B,CADK,EAEzBC,IAFyB,CAEpB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAFN,CAA5B;AAID,QAAMC,iBAAiB,GAAGb,MAAM,CAACI,MAAP,CAAcN,SAAd,EACzBO,MADyB,CACjBC,QAAD,IAAc;AACrB,WAAON,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACD,UAAD,CAAL,CAAkBM,OAA9B,EAAuCY,IAAvC,CACNC,YAAD,IAAkBA,YAAY,KAAKT,QAAQ,CAACE,EADrC,CAAP;AACgD,GAHvB,EAIxBC,IAJwB,CAInB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAJP,CAA1B;AAMCrB,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCqB,iBAAjC;AAEA,SAAO;AACLxB,IAAAA,IAAI,EAAE;AACJwB,MAAAA,iBADI;AAEJV,MAAAA,mBAFI,CAGL;;AAHK;AADD,GAAP;AAOD;;AAED,eAAejB,OAAO,CAACS,eAAD,CAAP,CAAyBR,IAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport {Tab, Image, Card} from 'semantic-ui-react'\nimport { connect } from 'react-redux'\n\n\n export  class Home extends Component {\n\n    render() {\n        const { data } = this.props;\n        console.log ('DATA', data)\n        return <Tab panes={panes({ data })}  />;\n      }\n    \n\n\n\n}\n\nconst panes = (props)=> {\n\nconst {data} = props;\n\nreturn [\n{\nmenuItem : 'Unanswered', render: () =>  (\n    <Tab.Pane>\n   \n    </Tab.Pane>\n     )\n},\n\n{\nmenuItem : 'Answered', render: () =>  <Tab.Pane>Answered</Tab.Pane>\n}  \n];\n\n}\nfunction mapStateToProps({ authedUser, users, questions }) {\n    const answeredIds = Object.keys(users[authedUser].answers);\n    \n    const unansweredQuestions = Object.values(questions)\n      .filter(question => !answeredIds.includes(question.id))\n      .sort((a, b) => b.timestamp - a.timestamp);\n  \n   const answeredQuestions = Object.values(questions)\n   .filter((question) => {\n    return Object.keys(users[authedUser].answers).find(\n    (userQuestion) => userQuestion === question.id)})\n    .sort((a, b) => b.timestamp - a.timestamp);\n    \n    console.log('answeredQuestions', answeredQuestions)\n\n    return {\n      data: {\n        answeredQuestions,\n        unansweredQuestions,\n       // answeredQuestions\n      }\n    };\n  }\n  \n  export default connect(mapStateToProps)(Home);"]},"metadata":{},"sourceType":"module"}